{"name":"Famd","tagline":"Faux AMD Library. Inspired by the AMD architecture. Extends the native Navigator object.","body":"# famd :alien: :metal:\r\nFaux AMD Library. Inspired by the AMD architecture. Extends the native [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) object. This library is dependent on \r\njQuery library and the [RunWhen](https://github.com/rafaelgandi/RunWhen) function.\r\n\r\n## Methods exposed using the Navigator object.\r\n\t* navigator.famd - FAMD object. Contains utility methods [getLoadedScripts(), addPathAsLoaded(src), isPathLoaded(src)]\r\n\t* navigator.require - Used to specify/load a dependency js file\r\n\t* navigator.define - Used to define a famd module\r\n\t* navigator.mod - Used to access the methods/properties of a famd module\r\n\t\r\n### navigator.require\t\r\n\tThis method takes 2 parameters the second being optional. The first parameter is the complete path to the javascript\r\n\tfile to load. The second optional parameter is the callback to call when the script file is loaded.\r\n\t\r\n\tThis is usually called above any famd module definition. This loads a script only once. Same concept as the php function \r\n\t\"require_once\". Internally uses jQuery's getScript() method.\t\r\n\t\r\n```JavaScript\r\nnavigator.require('Mod.mod1.js');\r\nnavigator.require('Mod.mod2.js');\r\nnavigator.require('Mod.mod3.js');\r\nnavigator.require('js/highlightFade.min.js');\r\nnavigator.require('js/jquery.blockUI.pak.js');\r\n```\r\n#### navigator.require can also be chained.\r\n\r\n```JavaScript\r\nnavigator\r\n.require('Mod.mod1.js')\r\n.require('Mod.mod2.js')\r\n.require('Mod.mod3.js')\r\n.require('js/highlightFade.min.js')\r\n.require('js/jquery.blockUI.pak.js');\r\n```\r\n\r\n### navigator.define\r\n\tDefines/creates an famd module. This method takes in 3 parameters. The first is the name/id of the module which could be any string \r\n\texcept the \"@\" character. The second is an array of module names/id that the module is dependent to. If the module does not have any \r\n\tdependencies then we can automatically make the second parameter as the callback. The third parameter is the callback function that will \r\n\treturn the module object.\r\n\t\r\n#### Normal defining of a module\t\r\n```JavaScript\r\nnavigator.require('Mod.mod1.js');\r\nnavigator.require('Mod.mod2.js');\r\nnavigator.require('js/highlightFade.min.js');\r\nnavigator.define('Mod.mod3', [\r\n\t'Mod.mod1', \r\n\t'Mod.mod2',\r\n\t'@$.fn.highlightFade'\t\r\n], function ($, undefined) {\r\n\talert(typeof $.fn.highlightFade);\t\r\n\talert(navigator.mod('Mod.mod1').foo());\t\r\n\tvar mod3 = {\r\n\t\tfoo: function () {\r\n\t\t\treturn 'hello from mod 3';\r\n\t\t},\r\n\t\tmod2: function () {\r\n\t\t\treturn navigator.mod('Mod.mod2').foo();\r\n\t\t}\r\n\t};\t\r\n\talert(mod3.mod2());\r\n\talert($);\r\n\treturn mod3;\r\n});\r\n```\r\n\r\n#### Defining a module with one dependency. 2nd parameter can be a string\r\n```JavaScript\r\nnavigator.require('Mod.mod1.js');\r\nnavigator.define('Mod.mod2', 'Mod.mod1', function ($, undefined) {\r\n\r\n\tvar Events = {};\t\r\n\t\r\n\treturn {\r\n\t\tfoo: function () {\r\n\t\t\treturn 'hello from mod 2';\r\n\t\t}\r\n\t};\r\n});\r\n```\r\n\r\n#### Defining a module without dependencies\r\n```JavaScript\r\nnavigator.define('Mod.mod1', function () {\r\n\treturn {\r\n\t\tfoo: function () {\r\n\t\t\treturn 'hello from mod 1';\r\n\t\t}\r\n\t};\r\n});\r\n```\r\n\r\n#### Defining a module that does not return anything\r\n```JavaScript\r\nnavigator.require('Mod.mod1.js');\r\nnavigator.require('Mod.mod2.js');\r\nnavigator.require('Mod.mod3.js');\r\nnavigator.require('js/highlightFade.min.js');\r\nnavigator.require('js/jquery.blockUI.pak.js');\r\nnavigator.define('Mod.mod4', [\r\n\t'Mod.mod1', \r\n\t'Mod.mod2',\r\n\t'@jQuery.fn.highlightFade',\r\n\t'Mod.mod3',\r\n\t'@jQuery.fn.block'\t\r\n], function ($, undefined) {\r\n\talert(typeof $.fn.block);\t\r\n\talert(navigator.mod('Mod.mod3').foo());\r\n});\r\n```\r\n\r\n### navigator.mod\r\n\tMethod used to get the methods/properties of a module. Takes the module name/id as its only parameter. \r\n\tThis is also internally used by RunWhen to check for the availablity of the module.\r\n\r\n```JavaScript\r\nnavigator.mod('Mod.mod3').foo(); // Calling the method foo() from module \"Mod.mod3\"\r\n```\t\r\n\r\n## :squirrel: Enjoy!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}